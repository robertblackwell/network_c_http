Finsh off demo:
  ☐ valgrind for memory leaks
  ☐ profile to find  bottle necks
  ☐ record some async vs sync comparison times
  ☐ briing asio_listener into the main code
  ☐ interthread queue is unclear fix it and make it asio compliant
  ☐ documentation
  ☐ review how tags work for watcher objects

Pickup http:
  ☐ get parse tests working and review parser in light of how its done in demo
  ☐ refresh http verify and sync server in light of demo and get those working
  ☐ what can demon_async_app tells us about http_async_app structure
  ☐ valgrind for memory leaks
  ☐ profile for bottle necks
  ☐ run tests to compare performance of sync and asyn servers

New set of priorities Nov 2024:
    ☐ timers do not post the callback - fix
    ☐ runloop.h does not cleanly display the external interface, still too much private stuff
    ☐ interthread queue - have a version that seems to work. More testing.
    ☐ there is confusion between runloop_register and runloop_arm - clear up that confusion
    ☐ demo_app and demo_verify seem to be working. valgrind for memory leaks
    ☐ demo_app profile tools work out how to do this - clion may have a way
    ☐ httpmessage does not correctly free the elements of the HDRList_free
    ☐ test_demo_full does not finish 

  ☐ Too many things happening
  ☐ Demo protocol needs to be finished - run valgrind to find memory leaks
  ☐ parser interface needs to be uniformized - that requires Html parser looks like the DemoMessageParser
  ☐ what if anything is the correct role for thread local storage
  ☐ need to find ways to reduce the malloc-ing that is taking place
      ☐ for the 2 run lists use an array of Functors with pass and return by value for adding and removing
      ☐ the fdtable should work without frequent mallocs as indexes are fds and we could use a bit map for iused()
  ☐ naming is still an issue
  ☐ what is evfd_event and w_queue - do they both work and do we need them ?- - this needs fixing as does test_q
  ☐ w_rdrwrtr should not have 2 fd fields and reconsider having two callbacks - that should happen in tcp related objects
  ☐ tcpconn should not both read_some() and read_message() thats is mixing levels 
  ☐ add posting to a reactor from another thread
  ☐ make the reactor tests more understandable 
  ☐ reactor q test fails
  ☐ review reactor and run loop functions with a view to keeping as small as possible
  ☐ review watchers for the same reason
  ☐ in both cases make sure comments are correct
  ☐ simplifiy naming of the reactor/runloop
  ☐ review packaging of aoi_api, aio_api/types.h for example seems wrong
  ☐ ensure all reactor/runloop/watchers have tests
  ☐ check tagging is correct everywhere and try to put tagging inside the .c file not visible in the .h file
  ☐ have a single aio_api.h file which pulls in all the stuff needed for async io
  ☐ can we timeout waitiing for listen/read/write events
  ☐ have a single interface header file for sync example

  ☐ ceg_alloc - a better name
  ☐ check all header files in api for extraneous include - that is include of non api header files
  ☐ HttpMessage peeks into ll_parser_types to latch onto the enums provided by llhttp. Must be a tidier way to do this.
  ☐ merge c_http/logging.h/c + print macros in aio_api/type.h


 ☐ better tests for List found a bug in it recently that was not caught by tests
 ☐ more tests for buffers - a number of new methods with no tests
  ☐ add installation step to the Cmake files
 ☐ review the policy of free(&thing) that has caused some bugs. Also an issue for List remove type functions. How to enforce
 ☐ XXX_free -> XXX_dispose not yet complete
 ☐ handler_example demo how to parse url/target, query string as tools for a meaningful handle function
 ☐ make handler_example echo the request in a way that demonstrates if picked out all the relevant bits of the request
 ☐ add the tag and type check macros to the top level macro file
 ☐ put check_tag usage in .c file not .h file
☐ documentation
☐ more documentation for writer, bufferchain, client server - in particular explain the handler
☐ work out how to do read-the-docs documentation  
☐ XrHandler still uses HdrList and hence peeks behind the api - fix
☐ XXX_free to var variable in aio_api and reactor folders
☐ lets get the server working at least in a rudimentary fashion
☐ then get the event interface to act like edge triggered but without necessarily using edge triggered at the epoll interface. This may make it easier
☐ consider how to make select/epoll swappable
☐ probably need a Connector object
☐ this about having a SockReader and SockWriter as derived types of Conn rather than loading everything (all the read/write functions) into Conn

☐ rethink the reactor interface - multiple watchers per socket fd, more fine grained arm/disarm - actually more convenient arming/disarming. 
☐ The interface should not require knowledge of such things as epollin epollout  
☐ combine new and register into a single call and use arm and disarm consistently
☐ timers have their own chain and tiggered by epoll_wait return rather than use an FDA
☐ io watchers need to support multiple watchers per fd each watching different events and different callbacks. This is so each socket fd can have both a read watcher and a write watcher. This is necessary to handle duplex protocols such as http/1.1 tunnel.
☐ inter thread queue does not seem to work find out why - how to have multi threaded async server. Maybe investigate libuv thread pool
☐ clean up xr server - too much redundant code
 ☐ make conn into an opaque object

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive:
  ✔ make logger multi-threaded @done(24-11-03 20:42) @project(New set of priorities Nov 2024)
  ✔ find the multi-threaded   @done(24-11-12 19:36) @project(New set of priorities Nov 2024)
  ✔ eventfd has 3 different mechanisms. Have tests that try them all @done(24-11-04 16:40) @project(New set of priorities Nov 2024)
  ✔ review tests for io and listen @done(24-11-10 13:37) @project(New set of priorities Nov 2024)
  ✔ how to encode #define CCCCC inside the cmakelist.txt file to apply for part of the code base. More generally how to handle config via #defines @done(24-11-10 13:37) @project(New set of priorities Nov 2024)
  ✔ can some fds be level triggered while others are edge ? - answer is yes - level vs edge is by fd @done(24-11-04 08:56) @project(New set of priorities Nov 2024)
  ✔ following on trigger question - change runloop functions so that some fd's can be level triggered and others edge @done(24-11-10 13:37) @project(New set of priorities Nov 2024)
  ✔ epoll has a mechanism to remeber a void* for each fd - could used this rather than the fd to find the instance of the watcher struct @done(24-11-10 13:37) @project(New set of priorities Nov 2024)
  ✔ a problem with lists some list function free() the object held by the list @done(24-11-13 19:52) @project(New set of priorities Nov 2024)
  ✔ -- List_itr_remove  is one such example. Need to review all list functions and their calls to make this clean @done(24-11-13 19:52) @project(New set of priorities Nov 2024)
  ✔ should review all List_new() calls to be sure we know which lists are free()ing their content objects @done(24-11-13 19:52) @project(New set of priorities Nov 2024)
  ✔ with a view to removing this option @done(24-11-13 19:52) @project(New set of priorities Nov 2024)
 ✔ rename XrReactor to something simpler and more generally introduce a runloop naming scheme @done (22-11-17 09:09) @project(New list of TODOs )
 ✔ make sure all the reactor tests actually run - there are some commented out @done (22-11-17 09:09) @project(New list of TODOs )
 ✔ ensure that tagggin does not break quietly if the tag is too big - gets caught at runtiime @done (21-10-17 10:39) @project(New list of TODOs )
 ✔ refactor folders and files to have more logical groupings @done (21-10-16 21:55) @project(New list of TODOs )
 ✔ Think about making XrXXWatcher types all the same type and use a union NO @done (20-12-15 16:16) @project(XR)
 ✔ thorough testing of full and empty conditions - I think something goes wrong when server is overwhelmed by verifier @done (20-12-15 16:12) @project(Queue)
 ✔ the inter thread queue needs tidying up so that no shuffling entries down as the fron is taken away - make a it into a ring @done (20-12-15 16:12) @project(Queue)
 ✔ XXXX_free  - change its name to make the point @done (20-12-15 16:12) @project(API for sync server)
 ✔ RdSocket forces itself into the api because of our generalization of datasource for testing - what to do about it - SOLUTION provide Reader with a private interface for testing - this interface hidden away from api @done (20-12-15 15:21) @project(API for sync server)
 ✔ queue test for corrent behaviour when full and empty @done (20-12-15 14:08) @project(API for sync server)
 ✔ convert queue to Typed List or circular style so that dont need to shuffle down @done (20-12-14 21:10) @project(Misc)
 ✔ bug - parser does not return useful code from parser error @done (20-12-14 21:10) @project(Misc)
 ✔ replace printf() with logger statements - move xr macros to top level @done (20-12-14 21:09) @project(Macros)
 ✔ combine trace and test macros from c_http and xr into one set @done (20-12-14 21:09) @project(Macros)
 ✔ clean up logging - too much output @done (20-12-14 21:09) @project(Macros)
 ✔ BufferChain should have IOBUffer underneath @done (20-12-14 21:08) @project(Buffers)
 ✔ BufferChain knows about List_iter - need to fix that maybe make iter void* @done (20-12-14 21:07) @project(API for sync server)
 ✔ check the api is consistent about XXXX_free() does it take this or &this - yes @done (20-12-14 21:04) @project(API for sync server)
 ✔ writer - remove reference to HdrList from interface and add write body chunked - probably have to rethink that interface @done (20-12-13 23:43) @project(API for sync server)
 ✔ server - make the size of the workers array defined at runtime. If necesssary create a variable length array @done (20-12-13 23:43) @project(API for sync server)
 ✔ server - give it command line options @done (20-12-13 23:43) @project(API for sync server)
 ✔ client - make a version that takes a full message in addition to the current version that takes a string @done (20-12-13 23:43) @project(API for sync server)
 ✔ reader - remove the HttpMessageParser from visibility - have it allocated within the new init functions @done (20-12-13 15:55) @project(API for sync server)
 ✔ message add set content-length and make chunked functions - not tested @done (20-12-13 15:47) @project(API for sync server)
 ✔ message make the HdrList non visible in the message interface @done (20-12-13 15:13) @project(API for sync server)
 ✔ for all of these add CHECK_TAG @done (20-12-12 20:01) @project(API for sync server)
 ✔ writer - make struct opaque @done (20-12-12 19:43) @project(API for sync server)
 ✔ server - make opaque @done (20-12-12 19:43) @project(API for sync server)
 ✔ reader make struct opaque @done (20-12-12 19:43) @project(API for sync server)
 ✔ client - make struct opaque @done (20-12-12 19:43) @project(API for sync server)
 ✔ url psrase has been lost with conversion away from http-parser @done (20-11-29 07:56) @project(Template classes)
 ✔ change name of HeaderLine to something like Hdr or KVPair @done (20-10-02 07:17) @project(TODO)
 ✔ devise a test for XXXX_free() to ensure arg is set to NULL - all classes @done (20-10-02 07:16) @project(TODO)
 ✔ replace all malloc/free pairs with Allocate/Deallocate @done (20-09-23 18:12) @project(TODO)
 ✔ change buffer tests to be pure C @done (20-09-23 18:12) @project(TODO)
 ✔ test Allocate failure for all classes by stubbing Allocate - forget @done (20-09-23 17:42) @project(TODO)
